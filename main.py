import asyncio
import datetime
import json
import sqlite3

import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message

import keyboards as kb

bot = Bot(token='5946513884:AAGkl2MPaJ5sK0BRYsbWkY6PV23JJBF1-aU')
API = '709e3cbe105d05f7bfdb27403929d3bc'
dp = Dispatcher()


last_city = None
is_subscribed = False
# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
file_name = 'weather_data.json'
with open(file_name, 'r', encoding='utf-8') as json_file:
    weather_mapping = json.load(json_file)


conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        user_id INTEGER PRIMARY KEY,
        city TEXT,
        is_subscribed INTEGER
    )
''')
conn.commit()


@dp.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')


@dp.message(F.text.lower() == '–∑–∞–≤—Ç—Ä–∞')
async def cmd_weather_tomorrow(message: Message):
    global last_city
    if last_city:
        tomorrow = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime('%Y-%m-%d')
        res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={last_city}&appid={API}&units=metric')
        if res.status_code == 200:
            data = json.loads(res.text)
            tomorrow_data = None
            for forecast in data['list']:
                if forecast['dt_txt'].split()[0] == tomorrow:
                    tomorrow_data = forecast
                    break
            if tomorrow_data:
                temp = tomorrow_data['main']['temp']
                temp_like = tomorrow_data['main']['feels_like']
                pressure = tomorrow_data["main"]["pressure"]
                wind_speed = tomorrow_data["wind"]["speed"]
                humidity = tomorrow_data["main"]["humidity"]
                weather_trans_en = tomorrow_data['weather'][0]['description']
                weather_trans_ru = weather_mapping.get(weather_trans_en, weather_trans_en)
                weather_info = (f'üå§Ô∏è–ó–∞–≤—Ç—Ä–∞: {weather_trans_ru}\n'
                                f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n'
                                f'ü§≤–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_like}¬∞C\n'
                                f'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                f'üéà–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–±–∞—Ä\n'
                                f'üçÉ–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')
                await message.answer(text=weather_info, reply_markup=kb.main)
    else:
        await message.reply(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.')


@dp.message(F.text.lower() == '–ø–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è')
async def cmd_weather_3_days(message: Message):
    global last_city
    if last_city:
        today = datetime.datetime.now()
        dates_to_check = ["üìÖ–ó–∞–≤—Ç—Ä–∞", "üìÖ–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "üìÖ–ß–µ—Ä–µ–∑ —Ç—Ä–∏ –¥–Ω—è"]
        weather_info = ""

        res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={last_city}&appid={API}&units=metric')
        if res.status_code == 200:
            data = json.loads(res.text)

            for i, date_to_check in enumerate(dates_to_check):
                date_weather = None
                for forecast in data['list']:
                    date_str = forecast['dt_txt'].split()[0]
                    if date_str == (today + datetime.timedelta(days=i + 1)).strftime('%Y-%m-%d'):
                        date_weather = forecast
                        break
                if date_weather:
                    temp = date_weather['main']['temp']
                    temp_like = date_weather['main']['feels_like']
                    pressure = date_weather["main"]["pressure"]
                    wind_speed = date_weather["wind"]["speed"]
                    humidity = date_weather["main"]["humidity"]
                    weather_trans_en = date_weather['weather'][0]['description']
                    weather_trans_ru = weather_mapping.get(weather_trans_en, weather_trans_en)

                    weather_info += f'{date_to_check}: \nüå§Ô∏è{weather_trans_ru}\n' \
                                    f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n' \
                                    f'ü§≤–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_like}¬∞C\n' \
                                    f'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n' \
                                    f'üéà–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–±–∞—Ä\n' \
                                    f'üçÉ–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n\n'

            await message.answer(text=weather_info, reply_markup=kb.main)
    else:
        await message.reply(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.')


@dp.message()
async def cmd_weather(message: Message):
    global last_city, is_subscribed
    print(last_city)

    if message.text.lower() == '–∫–∞–∂–¥—ã–π —á–∞—Å':
        is_subscribed = True
        cursor.execute('INSERT OR REPLACE INTO subscriptions (user_id, city, is_subscribed) VALUES (?, ?, ?)',
                       (message.from_user.id, last_city, 1))
        conn.commit()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å.')
        asyncio.create_task(send_weather_periodically(message.from_user.id))

    elif message.text.lower() == '—Å—Ç–æ–ø':
        is_subscribed = False
        cursor.execute('INSERT OR REPLACE INTO subscriptions (user_id, city, is_subscribed) VALUES (?, ?, ?)',
                       (message.from_user.id, last_city, 0))
        conn.commit()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.')

    else:
        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        last_city = message.text
        res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={last_city}&appid={API}&units=metric')

        if res.status_code == 200:
            data = json.loads(res.text)
            if "main" in data:
                temp = data["main"]["temp"]
                temp_like = data["main"]["feels_like"]
                pressure = data["main"]["pressure"]
                wind_speed = data["wind"]["speed"]
                humidity = data["main"]["humidity"]
                weather_trans_en = data["weather"][0]["description"]
                weather_trans_ru = weather_mapping.get(weather_trans_en, weather_trans_en)
                weather_info = (f'üå§Ô∏è–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞: {weather_trans_ru}\n'
                                f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n'
                                f'ü§≤–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_like}¬∞C\n'
                                f'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                f'üéà–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–±–∞—Ä\n'
                                f'üçÉ–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')

                await message.answer(weather_info, reply_markup=kb.main)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
                if is_subscribed:
                    await send_weather_periodically(message.from_user.id)

        else:
            await message.reply('–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.')


async def send_weather_periodically(user_id):
    while True:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        cursor.execute('SELECT is_subscribed, city FROM subscriptions WHERE user_id = ?', (user_id,))
        is_subscribed_db, city = cursor.fetchone()
        if not is_subscribed_db:
            break
        last_city = city
        res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={last_city}&appid={API}&units=metric')

        if res.status_code == 200:
            data = json.loads(res.text)
            if "main" in data:
                temp = data["main"]["temp"]
                temp_like = data["main"]["feels_like"]
                pressure = data["main"]["pressure"]
                wind_speed = data["wind"]["speed"]
                humidity = data["main"]["humidity"]
                weather_trans_en = data["weather"][0]["description"]
                weather_trans_ru = weather_mapping.get(weather_trans_en, weather_trans_en)
                weather_info = (f'üå§Ô∏è–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞: {weather_trans_ru}\n'
                                f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n'
                                f'ü§≤–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_like}¬∞C\n'
                                f'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                f'üéà–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–±–∞—Ä\n'
                                f'üçÉ–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')

                await bot.send_message(user_id, weather_info)
        await asyncio.sleep(3600)  # –¢–∞–π–º–µ—Ä


async def check_and_resume_subscriptions():
    cursor.execute('SELECT user_id, city FROM subscriptions WHERE is_subscribed = 1')
    subscribed_users = cursor.fetchall()
    for user in subscribed_users:
        user_id, city = user
        last_city = city
        asyncio.create_task(send_weather_periodically(user_id))


async def main():
    await check_and_resume_subscriptions()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–ø—É–∫–µ
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–í—ã—Ö–æ–¥')
